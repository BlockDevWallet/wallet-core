package bch

import (
	"encoding/hex"
	"encoding/json"
	"log"
	"testing"

	"github.com/lomocoin/wallet-core/core"
	"github.com/lomocoin/wallet-core/core/btc"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func init() {
	var err error
	seed, err := core.NewSeedFromMnemonic(testMnemonic)
	coin, err = New(seed, testNet)
	if err != nil {
		log.Fatal(err)
	}
}

var (
	testMnemonic = "lecture leg select like delay limit spread retire toward west grape bachelor"
	coin         *bch
	testNet      = true
)

func TestBCH_DerivePrivateKey(t *testing.T) {
	privateKey, err := coin.DerivePrivateKey()
	assert.NoError(t, err)
	t.Log(privateKey)
}

func TestBCH_DerivePublicKey(t *testing.T) {
	pubKey, err := coin.DerivePublicKey()
	assert.NoError(t, err)
	t.Log(pubKey)
}

func TestBCH_DeriveAddress(t *testing.T) {
	address, err := coin.DeriveAddress()
	assert.NoError(t, err)
	t.Log(address)
}

func TestBCH_DecodeTx(t *testing.T) {
	msg, err := coin.DecodeTx("7b225261775478223a223032303030303030303136333433613834376637313164306563613030303035323638323264346662316435353264636230616131626265626631373031353736373038303062643136303130303030303030306666666666666666303139636530663530353030303030303030313937366139313465326261303730323039333536373264323062396166326562323864316233353861623465326234383861633030303030303030222c22496e70757473223a5b7b2274786964223a2231366264303030383637353730313137626662653162616162306463353264356231346632643832323630353030613065636430313166373437613834333633222c22766f7574223a312c227363726970745075624b6579223a2261393134363131616539303266313466346431633838613066303662626239633662336331303931666465623837222c2272656465656d536372697074223a22353232313032383161663834653364373064343434306534373865613732383162623036623238663866653063656437326435613836313337633431363134333963383536343231303364393837323537313932633162323738326463633934343364663337326565326136623530393938386261303839653834666265643433616635346633336334323130333764336338646332376365313338366434653532363435346238373266393362643537633463623939303761666439353431333465376265353530643166346435336165222c22616d6f756e74223a302e317d5d2c22507269764b657973223a6e756c6c2c22466c616773223a6e756c6c7d")
	require.NoError(t, err, "lmc.DecodeTx")
	t.Log(msg)

	// msg, err = lmc.DecodeTx("7b0a2020225261775478223ac0a202022496e70757473223a205b0a202020207b0a2020202020202274786964223a202232613836316635323264366532633030393831666538363366306532336337303937353561306163373335616663303830323565313135633636623139386137222c0a20202020202022766f7574223a20302c0a202020202020227363726970745075624b6579223a202261393134353761663238353334653530626638663866386161303232656661626434613734633032613330323837222c0a2020202020202272656465656d536372697074223a2022353232313033613436353730313234633864393766643534323531333432333966666566303531613238663238343561313265303566656363363666643639393737366366333231303362396665653963363232383665656664363035326538366262623030363539653566373436623164363366376337333035333965666364336535633833316362323130336365366234343066316630663139623931386139636235623462333665393263636335323039316431633664663266396630353961363434356333613331326235336165220a202020207d0a20205d2c0a202022507269764b657973223a205b0a20202020226351524d616b554b57527678737957573532354e414e663668334c4e647770634a6b6e7465694152334d6a755135795670593643220a20205d2c0a202022466c616773223a2022414c4c220a7d")
	// require.NoError(t, err, "lmc.DecodeTx")
	// t.Log(msg)
}

/*
2N26fmeNECuRzebEsTcsQUzsapeEBCN84Yc
0281af84e3d70d4440e478ea7281bb06b28f8fe0ced72d5a86137c4161439c8564
03d987257192c1b2782dcc9443df372ee2a6b509988ba089e84fbed43af54f33c4
037d3c8dc27ce1386d4e526454b872f93bd57c4cb9907afd954134e7be550d1f4d
*/

func TestBCH_Sign(t *testing.T) {
	msg := new(btc.SignRawTransactionCmd)
	//createhex
	msg.RawTx = "02000000016343a847f711d0eca0000526822d4fb1d552dcb0aa1bbebf170157670800bd160100000000ffffffff0198929800000000001976a914e2ba07020935672d20b9af2eb28d1b358ab4e2b488ac00000000"
	msg.Inputs = &[]btc.RawTxInput{
		{
			Txid:         "16bd000867570117bfbe1baab0dc52d5b14f2d82260500a0ecd011f747a84363",
			Vout:         1,
			ScriptPubKey: "a914611ae902f14f4d1c88a0f06bbb9c6b3c1091fdeb87",
			RedeemScript: "52210281af84e3d70d4440e478ea7281bb06b28f8fe0ced72d5a86137c4161439c85642103d987257192c1b2782dcc9443df372ee2a6b509988ba089e84fbed43af54f33c421037d3c8dc27ce1386d4e526454b872f93bd57c4cb9907afd954134e7be550d1f4d53ae",
			Amount:       0.1,
		},
	}
	data, err := json.Marshal(msg)
	assert.NoError(t, err)
	sign, err := coin.Sign(hex.EncodeToString(data), "cNrctdQ72uK4mzWUs6nbWoHFWtmLWR5eq2FX7gCr9rV2SAtcYzum")
	assert.NoError(t, err)
	assert.Equal(t, "02000000016343a847f711d0eca0000526822d4fb1d552dcb0aa1bbebf170157670800bd1601000000b500483045022100e4a2ff55806070e12aced4ce8fd7f62c5ab61e09b25b0c5f6df3d8aa6617be6b022061a7110c1a32048a6ab7a1f22a68143bf548f0e701004f666aca3e0273680832414c6952210281af84e3d70d4440e478ea7281bb06b28f8fe0ced72d5a86137c4161439c85642103d987257192c1b2782dcc9443df372ee2a6b509988ba089e84fbed43af54f33c421037d3c8dc27ce1386d4e526454b872f93bd57c4cb9907afd954134e7be550d1f4d53aeffffffff0198929800000000001976a914e2ba07020935672d20b9af2eb28d1b358ab4e2b488ac00000000", sign)

	t.Log("---------------------------second sign-----------------")
	// sign once hex
	msg.RawTx = sign
	data, err = json.Marshal(msg)
	assert.NoError(t, err)
	sign, err = coin.Sign(hex.EncodeToString(data), "cPHy5BUP5K3UAbSfiPR9iKxKy5quBuVvnjsdnFWeq3YRo7r7TuPL")
	assert.NoError(t, err)
	assert.Equal(t, "02000000016343a847f711d0eca0000526822d4fb1d552dcb0aa1bbebf170157670800bd1601000000fdfe0000483045022100e4a2ff55806070e12aced4ce8fd7f62c5ab61e09b25b0c5f6df3d8aa6617be6b022061a7110c1a32048a6ab7a1f22a68143bf548f0e701004f666aca3e027368083241483045022100e0ef8bd370370119f72070adaf857bac215218bfda9b06af10dc7d8ccf2b542e022046532bb2bd4fbb328b7aa78405e077928dc3ea0c2fbbfeef7fdb1a61074f6b2a414c6952210281af84e3d70d4440e478ea7281bb06b28f8fe0ced72d5a86137c4161439c85642103d987257192c1b2782dcc9443df372ee2a6b509988ba089e84fbed43af54f33c421037d3c8dc27ce1386d4e526454b872f93bd57c4cb9907afd954134e7be550d1f4d53aeffffffff0198929800000000001976a914e2ba07020935672d20b9af2eb28d1b358ab4e2b488ac00000000", sign)
}
