package omni

import (
	"encoding/hex"
	"encoding/json"
	"log"
	"testing"

	"github.com/dabankio/wallet-core/core"
	"github.com/dabankio/wallet-core/core/btc"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func init() {
	var err error
	seed, err := core.NewSeedFromMnemonic(testMnemonic)
	coin, err = New(seed, testNet)
	if err != nil {
		log.Fatal(err)
	}
}

var (
	testMnemonic = "lecture leg select like delay limit spread retire toward west grape bachelor"
	coin         *omni
	testNet      = true
)

func TestOMNI_DerivePrivateKey(t *testing.T) {
	privateKey, err := coin.DerivePrivateKey()
	assert.NoError(t, err)
	t.Log(privateKey)
}

func TestOMNI_DerivePublicKey(t *testing.T) {
	pubKey, err := coin.DerivePublicKey()
	assert.NoError(t, err)
	t.Log(pubKey)
}

func TestOMNI_DeriveAddress(t *testing.T) {
	address, err := coin.DeriveAddress()
	assert.NoError(t, err)
	t.Log(address)
}

func TestOMNI_DecodeTx(t *testing.T) {
	msg, err := coin.DecodeTx("7b225261775478223ac22496e70757473223a5b7b2274786964223a2231346562336536643766663364306338366337643136623934313566303737666563323165306363656661313063323732663632613262393664373234623534222c22766f7574223a312c227363726970745075624b6579223a2261393134333931373739323666373762353065353661643861666330346364323266393565656161366139623837222c2272656465656d536372697074223a22353232313032316364386234636161323662376563346431393934303063643632306339663434303630623261333731316664636363643263373137653565636530613761333231303230636630643764343034333935346261633066653265373030633338643336393036393064653864326137623637646265616334333163643063643634343161323130333438313534383939313131666631336335383430643934383630363330386432373264363537306337383932386362393663303765666134376161373937623335336165227d5d2c22507269764b657973223a6e756c6c2c22466c616773223a6e756c6c7d")
	require.NoError(t, err, "OMNI.DecodeTx")
	t.Log(msg)
}

func TestOMNI_Sign(t *testing.T) {
	msg := new(btc.SignRawTransactionCmd)
	// createhex
	msg.RawTx = "0100000001eb29f6d3a024756a66ebf68277b5a816307903657e44da18e98d7d5b00411a0c0000000000ffffffff033f3307000000000017a914611ae902f14f4d1c88a0f06bbb9c6b3c1091fdeb870000000000000000166a146f6d6e690000000000000002000000000393870022020000000000001976a9147598fcf86895d79e81bbf86b308b2c010a8f36eb88ac00000000"
	msg.Inputs = &[]btc.RawTxInput{
		{
			Txid:         "0c1a41005b7d8de918da447e6503793016a8b57782f6eb666a7524a0d3f629eb",
			Vout:         0,
			ScriptPubKey: "a914611ae902f14f4d1c88a0f06bbb9c6b3c1091fdeb87",
			RedeemScript: "52210281af84e3d70d4440e478ea7281bb06b28f8fe0ced72d5a86137c4161439c85642103d987257192c1b2782dcc9443df372ee2a6b509988ba089e84fbed43af54f33c421037d3c8dc27ce1386d4e526454b872f93bd57c4cb9907afd954134e7be550d1f4d53ae",
		}}
	data, err := json.Marshal(msg)
	assert.NoError(t, err)
	sign, err := coin.Sign(hex.EncodeToString(data), "cNrctdQ72uK4mzWUs6nbWoHFWtmLWR5eq2FX7gCr9rV2SAtcYzum")
	assert.NoError(t, err)
	assert.Equal(t, "0100000001eb29f6d3a024756a66ebf68277b5a816307903657e44da18e98d7d5b00411a0c00000000b40047304402205855197e7040c70a5d0b44f66e5ca48eac2020e7f4e653322bef7c19635dd10b022032ce12c4fedc6554974cd11143ccdaf763cf5d3d069f0bf45674fc875f5ff491014c6952210281af84e3d70d4440e478ea7281bb06b28f8fe0ced72d5a86137c4161439c85642103d987257192c1b2782dcc9443df372ee2a6b509988ba089e84fbed43af54f33c421037d3c8dc27ce1386d4e526454b872f93bd57c4cb9907afd954134e7be550d1f4d53aeffffffff033f3307000000000017a914611ae902f14f4d1c88a0f06bbb9c6b3c1091fdeb870000000000000000166a146f6d6e690000000000000002000000000393870022020000000000001976a9147598fcf86895d79e81bbf86b308b2c010a8f36eb88ac00000000", sign)

	t.Log("---------------------------second sign-----------------")
	// sign once hex
	msg.RawTx = sign
	data, err = json.Marshal(msg)
	assert.NoError(t, err)
	sign, err = coin.Sign(hex.EncodeToString(data), "cSdeYfMWr4oMTu22GZJuQqCspNxqubNpUwm7a73S172Yn1CaiXhC")
	assert.NoError(t, err)
	assert.Equal(t, "0100000001eb29f6d3a024756a66ebf68277b5a816307903657e44da18e98d7d5b00411a0c00000000fdfd000047304402205855197e7040c70a5d0b44f66e5ca48eac2020e7f4e653322bef7c19635dd10b022032ce12c4fedc6554974cd11143ccdaf763cf5d3d069f0bf45674fc875f5ff49101483045022100ee5a6009f7c86ef868c42a6427a22cb7c8e24e468bdc4dcc2a452b5e21cc70910220452ea6d006136ee82e7b3ae94c4775e435722de1d36f9bb99509d906ef1a45c7014c6952210281af84e3d70d4440e478ea7281bb06b28f8fe0ced72d5a86137c4161439c85642103d987257192c1b2782dcc9443df372ee2a6b509988ba089e84fbed43af54f33c421037d3c8dc27ce1386d4e526454b872f93bd57c4cb9907afd954134e7be550d1f4d53aeffffffff033f3307000000000017a914611ae902f14f4d1c88a0f06bbb9c6b3c1091fdeb870000000000000000166a146f6d6e690000000000000002000000000393870022020000000000001976a9147598fcf86895d79e81bbf86b308b2c010a8f36eb88ac00000000", sign)
}
