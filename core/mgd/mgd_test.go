package mgd

import (
	"encoding/hex"
	"encoding/json"
	"log"
	"testing"

	"github.com/lomocoin/wallet-core/core"
	"github.com/lomocoin/wallet-core/core/btc"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func init() {
	var err error
	seed, err := core.NewSeedFromMnemonic(testMnemonic)
	coin, err = New(seed)
	if err != nil {
		log.Fatal(err)
	}
}

var (
	testMnemonic = "lecture leg select like delay limit spread retire toward west grape bachelor"
	coin         *mgd
)

func TestMGD_DerivePrivateKey(t *testing.T) {
	privateKey, err := coin.DerivePrivateKey()
	assert.NoError(t, err)
	t.Log(privateKey)
}

func TestMGD_DerivePublicKey(t *testing.T) {
	pubKey, err := coin.DerivePublicKey()
	assert.NoError(t, err)
	t.Log(pubKey)
}

func TestMGD_DeriveAddress(t *testing.T) {
	address, err := coin.DeriveAddress()
	assert.NoError(t, err)
	t.Log(address)
}

func TestMGD_DecodeTx(t *testing.T) {
	msg, err := coin.DecodeTx("7b225261775478223ac22496e70757473223a5b7b2274786964223a2264386138646437353435663931333466386338323036323764323333316430643935393733353161353632353666653138356138636534366136353562303436222c22766f7574223a302c227363726970745075624b6579223a2261393134336136633632663165396166373637636431616232383734656437376138663266636661353730633837222c2272656465656d536372697074223a22353232313033373166663461653265626364336530303030373132313465306563316339376538666234313838613132663465366530613264343135313039346137373232333231303238303964653730313334316362666537613064376361343833363766316566396439306239333833616130346364366434626365656132326266326134653863323130333233633138633666323236633239303134366132346464346130353838373630393765396566663933653938623530356430326434313066613862633532613035336165227d2c7b2274786964223a2237613835643536653137393463366335323438646531303664393438303864646134666336656530373433386138626161323166646434666536636338383438222c22766f7574223a302c227363726970745075624b6579223a2261393134336136633632663165396166373637636431616232383734656437376138663266636661353730633837222c2272656465656d536372697074223a22353232313033373166663461653265626364336530303030373132313465306563316339376538666234313838613132663465366530613264343135313039346137373232333231303238303964653730313334316362666537613064376361343833363766316566396439306239333833616130346364366434626365656132326266326134653863323130333233633138633666323236633239303134366132346464346130353838373630393765396566663933653938623530356430326434313066613862633532613035336165227d5d2c22507269764b657973223a6e756c6c2c22466c616773223a6e756c6c7d")
	require.NoError(t, err, "mgd.DecodeTx")
	t.Log(msg)
}

/*
4j82DwUXgENRiTfwGWPCuj5bZ6gw8vyF8hWdALdx4iSNdnoeJ15c 0371ff4ae2ebcd3e000071214e0ec1c97e8fb4188a12f4e6e0a2d4151094a77223 MVQ8CkNGyvkTnt9YKfutHNJcyzUoSwjraa
4jxbZaSAQEB3F26yqAFfCTKoo4fi92NE9tiZZrsii41nxEk9yT69 02809de701341cbfe7a0d7ca48367f1ef9d90b9383aa04cd6d4bceea22bf2a4e8c MEheN9kjYDTwsrvT1FCuCqj3sdkYK76Pd1
4jYf7g8oEiV6TJgoXKw1KDUVwsgZ9HRKJRKDY1auBSi2jPP6ry9t 0323c18c6f226c290146a24dd4a058876097e9eff93e98b505d02d410fa8bc52a0 M89Y8paNBpiPuwA6vqPfPGjAABGyNqfWnN
GPAqT5a4myUFbPApKZyWvn8v8qhpYbJhAp
*/
func TestMGD_Sign(t *testing.T) {
	msg := new(btc.SignRawTransactionCmd)
	//createhex
	msg.RawTx = "010000000246b055a646cea885e16f25561a3597950d1d33d22706828c4f13f94575dda8d80000000000ffffffff4888cce64fdd1fa2baa83874e06efca4dd0848d906e18d24c5c694176ed5857a0000000000ffffffff01847d2704000000001976a9141e922ffe9f97eef24f591c6668841c895431fad488ac00000000"
	msg.Inputs = &[]btc.RawTxInput{
		{
			Txid:         "d8a8dd7545f9134f8c820627d2331d0d9597351a56256fe185a8ce46a655b046",
			Vout:         0,
			ScriptPubKey: "a9143a6c62f1e9af767cd1ab2874ed77a8f2fcfa570c87",
			RedeemScript: "52210371ff4ae2ebcd3e000071214e0ec1c97e8fb4188a12f4e6e0a2d4151094a772232102809de701341cbfe7a0d7ca48367f1ef9d90b9383aa04cd6d4bceea22bf2a4e8c210323c18c6f226c290146a24dd4a058876097e9eff93e98b505d02d410fa8bc52a053ae",
		},
		{
			Txid:         "7a85d56e1794c6c5248de106d94808dda4fc6ee07438a8baa21fdd4fe6cc8848",
			Vout:         0,
			ScriptPubKey: "a9143a6c62f1e9af767cd1ab2874ed77a8f2fcfa570c87",
			RedeemScript: "52210371ff4ae2ebcd3e000071214e0ec1c97e8fb4188a12f4e6e0a2d4151094a772232102809de701341cbfe7a0d7ca48367f1ef9d90b9383aa04cd6d4bceea22bf2a4e8c210323c18c6f226c290146a24dd4a058876097e9eff93e98b505d02d410fa8bc52a053ae",
		}}
	data, err := json.Marshal(msg)
	assert.NoError(t, err)
	sign, err := coin.Sign(hex.EncodeToString(data), "4j82DwUXgENRiTfwGWPCuj5bZ6gw8vyF8hWdALdx4iSNdnoeJ15c")
	assert.NoError(t, err)
	assert.Equal(t, "010000000246b055a646cea885e16f25561a3597950d1d33d22706828c4f13f94575dda8d800000000b4004730440220625e92756beabfed1ab5ac9d11522db1e90a62ef7fb78e1e2c2fac7b323688c2022048e0ca7157521a6a9bcfe3243b9ca3b190f5bb2abb7033aee37296366926dffd014c6952210371ff4ae2ebcd3e000071214e0ec1c97e8fb4188a12f4e6e0a2d4151094a772232102809de701341cbfe7a0d7ca48367f1ef9d90b9383aa04cd6d4bceea22bf2a4e8c210323c18c6f226c290146a24dd4a058876097e9eff93e98b505d02d410fa8bc52a053aeffffffff4888cce64fdd1fa2baa83874e06efca4dd0848d906e18d24c5c694176ed5857a00000000b4004730440220019793182058ed9cc843711d67e54a275329e3e8b60286e4a372b8f73dceffed02202c445eba8907c0bb10914cead8232a0692f2416101f4ef68ddf5e22593c6a2dd014c6952210371ff4ae2ebcd3e000071214e0ec1c97e8fb4188a12f4e6e0a2d4151094a772232102809de701341cbfe7a0d7ca48367f1ef9d90b9383aa04cd6d4bceea22bf2a4e8c210323c18c6f226c290146a24dd4a058876097e9eff93e98b505d02d410fa8bc52a053aeffffffff01847d2704000000001976a9141e922ffe9f97eef24f591c6668841c895431fad488ac00000000", sign)

	t.Log("---------------------------second sign-----------------")
	//sign once hex
	msg.RawTx = sign
	data, err = json.Marshal(msg)
	assert.NoError(t, err)
	sign, err = coin.Sign(hex.EncodeToString(data), "4jxbZaSAQEB3F26yqAFfCTKoo4fi92NE9tiZZrsii41nxEk9yT69")
	assert.NoError(t, err)
	assert.Equal(t, "010000000246b055a646cea885e16f25561a3597950d1d33d22706828c4f13f94575dda8d800000000fdfd00004730440220625e92756beabfed1ab5ac9d11522db1e90a62ef7fb78e1e2c2fac7b323688c2022048e0ca7157521a6a9bcfe3243b9ca3b190f5bb2abb7033aee37296366926dffd01483045022100c692e58248f288e2ce5b21aa796a0c6cb37b6b5aa520976589f9c26f7c3150fd02206126ce281e160be4c4c6705cf9bd489a80c0f7d7fb2cd80c6b341d8bf6ea552c014c6952210371ff4ae2ebcd3e000071214e0ec1c97e8fb4188a12f4e6e0a2d4151094a772232102809de701341cbfe7a0d7ca48367f1ef9d90b9383aa04cd6d4bceea22bf2a4e8c210323c18c6f226c290146a24dd4a058876097e9eff93e98b505d02d410fa8bc52a053aeffffffff4888cce64fdd1fa2baa83874e06efca4dd0848d906e18d24c5c694176ed5857a00000000fc004730440220019793182058ed9cc843711d67e54a275329e3e8b60286e4a372b8f73dceffed02202c445eba8907c0bb10914cead8232a0692f2416101f4ef68ddf5e22593c6a2dd01473044022004e8daef23c0e524cff3a9b5ea0eefd465bc8a02f199a4d922a16efdd0b1ac3e022004804efaf4960e923fa44790a13a62b9917b7edc451316114859059c7852969e014c6952210371ff4ae2ebcd3e000071214e0ec1c97e8fb4188a12f4e6e0a2d4151094a772232102809de701341cbfe7a0d7ca48367f1ef9d90b9383aa04cd6d4bceea22bf2a4e8c210323c18c6f226c290146a24dd4a058876097e9eff93e98b505d02d410fa8bc52a053aeffffffff01847d2704000000001976a9141e922ffe9f97eef24f591c6668841c895431fad488ac00000000", sign)
}
