package xrp

import (
	"log"
	"testing"

	"github.com/dabankio/wallet-core/core"
	"github.com/stretchr/testify/assert"
)

func init() {
	var err error
	seed, err := core.NewSeedFromMnemonic(testMnemonic)
	coin, err = New(seed)
	if err != nil {
		log.Fatal(err)
	}
}

var (
	testMnemonic = "lecture leg select like delay limit spread retire toward west grape bachelor"
	coin         *xrp
)

func TestXrp_DerivePrivateKey(t *testing.T) {
	privateKey, err := coin.DerivePrivateKey()
	assert.NoError(t, err)
	t.Log(privateKey)
}

func TestXrp_DerivePublicKey(t *testing.T) {
	pubKey, err := coin.DerivePublicKey()
	assert.NoError(t, err)
	t.Log(pubKey)
}

func TestXrp_DeriveAddress(t *testing.T) {
	address, err := coin.DeriveAddress()
	assert.NoError(t, err)
	t.Log(address)
}

func TestXrp_Decode(t *testing.T) {
	txBlob := "120000240000000C61400000000012C4B068400000000000001E811431B04A15E96B73484A286306B69319A340C166E6831452A59531830D06CB7591F8453461C47AE8B2AC8F"
	txBlob = "120000240000000C61400000000012C4B068400000000000001E7300811431B04A15E96B73484A286306B69319A340C166E6831452A59531830D06CB7591F8453461C47AE8B2AC8FF3E010732103FC6BDB925EAAE763F09495150201CC7258915DCEDE50AFF4F93A73D63BCF8C6D744630440220527FEFAF2900C3A611D609FFF01DE7F2D6FEDFA357A99F3C26A47F59149515340220128C78DAE60CC53673E3F199D631BF833109A55EBDB0EE14E818728E029FC216811452A59531830D06CB7591F8453461C47AE8B2AC8FE1F1"
	// txBlob = "120000240000000C61400000000012C4B068400000000000001E7300811431B04A15E96B73484A286306B69319A340C166E6831452A59531830D06CB7591F8453461C47AE8B2AC8FF3E010732103FC6BDB925EAAE763F09495150201CC7258915DCEDE50AFF4F93A73D63BCF8C6D744630440220527FEFAF2900C3A611D609FFF01DE7F2D6FEDFA357A99F3C26A47F59149515340220128C78DAE60CC53673E3F199D631BF833109A55EBDB0EE14E818728E029FC216811452A59531830D06CB7591F8453461C47AE8B2AC8FE1E010732102AC2CE793AC19DE521F7690E74DCC9BEB3A8949DC61BCB3301E3BB26D0E20BEB2744630440220428ABBB5911B8EBC3752B70860F9BDFBDBEC112E3818998E3BC7C159C0CA2580022007ECD1A5C1576C5CAE33107DA9C3F1314628173FD618C9A1775FF8BE61AEDDB581148FC2B94BDDF1642921AD4E0134698BDF408F12FEE1F1"
	tx, err := coin.DecodeTx(txBlob)
	assert.NoError(t, err)
	t.Log(tx)
}

/*
pwKFsT18Av5sLP53QaRxCFBSAdqd9PFGPVaGLo4Kqkxep2gd8uh aBRFQAcJUwVDHiUaCmCXCfhZP9vZKZ5ih9WLjM2TrbYdQTZMTHL1 r3XzmdBW3BrPJH6wapFt1wJLSD91sw4a7e
pwe6xA19DA7hbG4ejkDkytN5JSQaibmHfoc5ghr1SLRm1ynAxjJ aBPz4nfWJrGLFoPp4KVaDyY67RUvvq5mzBYZ8E7YeuQ5YrNkGQmx rNBeyVpYMptAmcbiftZYpMxRPiMWfgRD6M
pwH88Ltgf9YZJCeSDNJGAqxGBDneawPTAbpV3K6MFb2ShtNjfr4 aBPGKz7qnVyWvncPibE4F84317L2XBouiz78Pp5TRK7r1zTeUESk rNf3uncYBTkkzXdLfB5eKwhLzgqScAkGze
*/
func TestXrp_Sign(t *testing.T) {
	txBlob := "120000240000000C61400000000012C4B068400000000000001E811431B04A15E96B73484A286306B69319A340C166E6831452A59531830D06CB7591F8453461C47AE8B2AC8F"
	sig, err := coin.Sign(txBlob, "pwKFsT18Av5sLP53QaRxCFBSAdqd9PFGPVaGLo4Kqkxep2gd8uh")
	assert.NoError(t, err)
	assert.Equal(t, "120000240000000C61400000000012C4B068400000000000001E7300811431B04A15E96B73484A286306B69319A340C166E6831452A59531830D06CB7591F8453461C47AE8B2AC8FF3E010732103FC6BDB925EAAE763F09495150201CC7258915DCEDE50AFF4F93A73D63BCF8C6D744630440220527FEFAF2900C3A611D609FFF01DE7F2D6FEDFA357A99F3C26A47F59149515340220128C78DAE60CC53673E3F199D631BF833109A55EBDB0EE14E818728E029FC216811452A59531830D06CB7591F8453461C47AE8B2AC8FE1F1", sig)

	sig, err = coin.Sign(sig, "pwH88Ltgf9YZJCeSDNJGAqxGBDneawPTAbpV3K6MFb2ShtNjfr4")
	assert.NoError(t, err)
	assert.Equal(t, "120000240000000C61400000000012C4B068400000000000001E7300811431B04A15E96B73484A286306B69319A340C166E6831452A59531830D06CB7591F8453461C47AE8B2AC8FF3E010732103FC6BDB925EAAE763F09495150201CC7258915DCEDE50AFF4F93A73D63BCF8C6D744630440220527FEFAF2900C3A611D609FFF01DE7F2D6FEDFA357A99F3C26A47F59149515340220128C78DAE60CC53673E3F199D631BF833109A55EBDB0EE14E818728E029FC216811452A59531830D06CB7591F8453461C47AE8B2AC8FE1E010732102AC2CE793AC19DE521F7690E74DCC9BEB3A8949DC61BCB3301E3BB26D0E20BEB2744630440220428ABBB5911B8EBC3752B70860F9BDFBDBEC112E3818998E3BC7C159C0CA2580022007ECD1A5C1576C5CAE33107DA9C3F1314628173FD618C9A1775FF8BE61AEDDB581148FC2B94BDDF1642921AD4E0134698BDF408F12FEE1F1", sig)
}
