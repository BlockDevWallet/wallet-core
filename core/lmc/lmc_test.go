package lmc

import (
	"encoding/hex"
	"encoding/json"
	"log"
	"testing"

	"github.com/btcsuite/btcd/btcjson"
	"github.com/lomocoin/HDWallet-Core/core"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func init() {
	var err error
	seed, err := core.NewSeedFromMnemonic(testMnemonic)
	coin, err = New(seed)
	if err != nil {
		log.Fatal(err)
	}
}

var (
	testMnemonic = "lecture leg select like delay limit spread retire toward west grape bachelor"
	coin         *lmc
)

func TestLMC_DerivePrivateKey(t *testing.T) {
	privateKey, err := coin.DerivePrivateKey()
	assert.NoError(t, err)
	t.Log(privateKey)
}

func TestLMC_DerivePublicKey(t *testing.T) {
	pubKey, err := coin.DerivePublicKey()
	assert.NoError(t, err)
	t.Log(pubKey)
}

func TestLMC_DeriveAddress(t *testing.T) {
	address, err := coin.DeriveAddress()
	assert.NoError(t, err)
	t.Log(address)
}

func TestLMC_DecodeTx(t *testing.T) {
	msg, err := coin.DecodeTx("7b225261775478223ac22496e70757473223a5b7b2274786964223a2266663832376135613039653261326535313066303761396434653331393330666231633761316438646265306237616638633937303839303736363833393132222c22766f7574223a312c227363726970745075624b6579223a2261393134663131623062346663633738373931363131663665383161303632383236663263376664646239613837222c2272656465656d536372697074223a22353232313032313563366332306133363732653432616139663538363366616263316164353261393235333964613834303762386238306336343434633761633432336131613231303266353631363366336533643532323663396161313531313237663630343362653837666230343862613163303161626133343833613132643830393666666234323130333963663636353363336361653133383565323739356631653664623661363339333861346634336336383735643965653539633230663466366261333133653135336165227d2c7b2274786964223a2236356662626237393230386338306363363336316463633164313665363539316266336461653439653037343965353935366336653830383836653361383331222c22766f7574223a312c227363726970745075624b6579223a2261393134663131623062346663633738373931363131663665383161303632383236663263376664646239613837222c2272656465656d536372697074223a22353232313032313563366332306133363732653432616139663538363366616263316164353261393235333964613834303762386238306336343434633761633432336131613231303266353631363366336533643532323663396161313531313237663630343362653837666230343862613163303161626133343833613132643830393666666234323130333963663636353363336361653133383565323739356631653664623661363339333861346634336336383735643965653539633230663466366261333133653135336165227d2c7b2274786964223a2230346538616665333062623331616131643839393666393735373361636638383934303361366664333663303330396138666364616433346334323963643364222c22766f7574223a312c227363726970745075624b6579223a2261393134663131623062346663633738373931363131663665383161303632383236663263376664646239613837222c2272656465656d536372697074223a22353232313032313563366332306133363732653432616139663538363366616263316164353261393235333964613834303762386238306336343434633761633432336131613231303266353631363366336533643532323663396161313531313237663630343362653837666230343862613163303161626133343833613132643830393666666234323130333963663636353363336361653133383565323739356631653664623661363339333861346634336336383735643965653539633230663466366261333133653135336165227d5d2c22507269764b657973223a6e756c6c2c22466c616773223a6e756c6c7d")
	require.NoError(t, err, "lmc.DecodeTx")
	t.Log(msg)

	//msg, err = lmc.DecodeTx("7b0a2020225261775478223ac0a202022496e70757473223a205b0a202020207b0a2020202020202274786964223a202232613836316635323264366532633030393831666538363366306532336337303937353561306163373335616663303830323565313135633636623139386137222c0a20202020202022766f7574223a20302c0a202020202020227363726970745075624b6579223a202261393134353761663238353334653530626638663866386161303232656661626434613734633032613330323837222c0a2020202020202272656465656d536372697074223a2022353232313033613436353730313234633864393766643534323531333432333966666566303531613238663238343561313265303566656363363666643639393737366366333231303362396665653963363232383665656664363035326538366262623030363539653566373436623164363366376337333035333965666364336535633833316362323130336365366234343066316630663139623931386139636235623462333665393263636335323039316431633664663266396630353961363434356333613331326235336165220a202020207d0a20205d2c0a202022507269764b657973223a205b0a20202020226351524d616b554b57527678737957573532354e414e663668334c4e647770634a6b6e7465694152334d6a755135795670593643220a20205d2c0a202022466c616773223a2022414c4c220a7d")
	//require.NoError(t, err, "lmc.DecodeTx")
	//t.Log(msg)
}

/*
"LSv4eKGc5k6HMXqAYQPTruB78kqbvRJf34",
"LfsUvqh6k7emuNMNwtdFuJk3tiTCvHbXjX",
"LVKkhu6KPKMWjUM1D2zuFgs76meKJoYkWb"
sgEFKsKWc28Xw3Jw8ndpTqPFuR7LrgsvCF
https://explorer.lomocoin.com/tx/b1c558a5b8eff939b4d1c0f2d161fd3d421ad23ec58c113e87b07837d84c283c
*/
func TestLMC_Sign(t *testing.T) {
	msg := new(btcjson.SignRawTransactionCmd)
	//createhex
	redeemScript := "52210215c6c20a3672e42aa9f5863fabc1ad52a92539da8407b8b80c6444c7ac423a1a2102f56163f3e3d5226c9aa151127f6043be87fb048ba1c01aba3483a12d8096ffb421039cf6653c3cae1385e2795f1e6db6a63938a4f43c6875d9ee59c20f4f6ba313e153ae"
	msg.RawTx = "0100000004bdeb5b03123968769008978cafb7e0dbd8a1c7b10f93314e9d7af010e5a2e2095a7a82ff0100000000ffffffff31a8e38608e8c656599e74e049ae3dbf91656ed1c1dc6163cc808c2079bbfb650100000000ffffffff3dcd29c434adcd8f9a30c036fda6039488cf3a57976f99d8a11ab30be3afe8040100000000ffffffff02840300000000000017a914f11b0b4fcc78791611f6e81a062826f2c7fddb9a8700162600000000001976a914bf819a7d1fc87cbef6dd6340c43f801e2e2299d488ac00000000"
	msg.Inputs = &[]btcjson.RawTxInput{
		{
			Txid:         "ff827a5a09e2a2e510f07a9d4e31930fb1c7a1d8dbe0b7af8c97089076683912",
			Vout:         1,
			ScriptPubKey: "a914f11b0b4fcc78791611f6e81a062826f2c7fddb9a87",
			RedeemScript: redeemScript,
		},
		{
			Txid:         "65fbbb79208c80cc6361dcc1d16e6591bf3dae49e0749e5956c6e80886e3a831",
			Vout:         1,
			ScriptPubKey: "a914f11b0b4fcc78791611f6e81a062826f2c7fddb9a87",
			RedeemScript: redeemScript,
		},
		{
			Txid:         "04e8afe30bb31aa1d8996f97573acf889403a6fd36c0309a8fcdad34c429cd3d",
			Vout:         1,
			ScriptPubKey: "a914f11b0b4fcc78791611f6e81a062826f2c7fddb9a87",
			RedeemScript: redeemScript,
		},
	}
	data, err := json.Marshal(msg)
	assert.NoError(t, err)
	sign, err := coin.Sign(hex.EncodeToString(data), "T8CL1HZQ6VfwyDh1RhxoArDoQiyU3gd3aU3GqiqxN6bdb7oHQCip")
	assert.NoError(t, err)
	assert.Equal(t, "0100000004bdeb5b03123968769008978cafb7e0dbd8a1c7b10f93314e9d7af010e5a2e2095a7a82ff01000000b500483045022100a93cd285ee7c39502a458a3f00294f82b40a11c9cbd420607ce1a8d34c7b444902201a3f69f52a2eb5316c8623976d0a329cf6eb89786127209f8ac8d3eb45f08711014c6952210215c6c20a3672e42aa9f5863fabc1ad52a92539da8407b8b80c6444c7ac423a1a2102f56163f3e3d5226c9aa151127f6043be87fb048ba1c01aba3483a12d8096ffb421039cf6653c3cae1385e2795f1e6db6a63938a4f43c6875d9ee59c20f4f6ba313e153aeffffffff31a8e38608e8c656599e74e049ae3dbf91656ed1c1dc6163cc808c2079bbfb6501000000b40047304402202808a5820389158f8c372df8cd810b8a03411c821371ceccdef5890b178043ab022057faaaa779b705efbb51c05678f1811d40ebca589eab2fa33668b09cdc01da62014c6952210215c6c20a3672e42aa9f5863fabc1ad52a92539da8407b8b80c6444c7ac423a1a2102f56163f3e3d5226c9aa151127f6043be87fb048ba1c01aba3483a12d8096ffb421039cf6653c3cae1385e2795f1e6db6a63938a4f43c6875d9ee59c20f4f6ba313e153aeffffffff3dcd29c434adcd8f9a30c036fda6039488cf3a57976f99d8a11ab30be3afe80401000000b500483045022100b16c626b9d9cb9c74ba2cca3d9b8a5a5a7dbdd3a4194a877b67057a3ce8c793c0220395c03b0b219cbc49e04ecdbb3c6c0057457f761140e5682c9a44d99cdbb119d014c6952210215c6c20a3672e42aa9f5863fabc1ad52a92539da8407b8b80c6444c7ac423a1a2102f56163f3e3d5226c9aa151127f6043be87fb048ba1c01aba3483a12d8096ffb421039cf6653c3cae1385e2795f1e6db6a63938a4f43c6875d9ee59c20f4f6ba313e153aeffffffff02840300000000000017a914f11b0b4fcc78791611f6e81a062826f2c7fddb9a8700162600000000001976a914bf819a7d1fc87cbef6dd6340c43f801e2e2299d488ac00000000", sign)

	//sign once hex
	msg.RawTx = sign
	data, err = json.Marshal(msg)
	assert.NoError(t, err)
	sign, err = coin.Sign(hex.EncodeToString(data), "T3xjh5a7VYoYrxnkNvEp3Kp5fp3iEkovSiJCPMMN58aGR9BCmAPc")
	assert.NoError(t, err)
	assert.Equal(t, "0100000004bdeb5b03123968769008978cafb7e0dbd8a1c7b10f93314e9d7af010e5a2e2095a7a82ff01000000fdfe0000483045022100a93cd285ee7c39502a458a3f00294f82b40a11c9cbd420607ce1a8d34c7b444902201a3f69f52a2eb5316c8623976d0a329cf6eb89786127209f8ac8d3eb45f0871101483045022100c274cf8dfe5437cf2fa286185f5c02daa4cafc7bccfccefa8c2acb37adcba32e02205de87b8f01729090c5153d4a9575e5a83aefacd5b146e01da612ced74789e9c5014c6952210215c6c20a3672e42aa9f5863fabc1ad52a92539da8407b8b80c6444c7ac423a1a2102f56163f3e3d5226c9aa151127f6043be87fb048ba1c01aba3483a12d8096ffb421039cf6653c3cae1385e2795f1e6db6a63938a4f43c6875d9ee59c20f4f6ba313e153aeffffffff31a8e38608e8c656599e74e049ae3dbf91656ed1c1dc6163cc808c2079bbfb6501000000fdfd000047304402202808a5820389158f8c372df8cd810b8a03411c821371ceccdef5890b178043ab022057faaaa779b705efbb51c05678f1811d40ebca589eab2fa33668b09cdc01da6201483045022100a1732e59bea4600ffc29347adf9fc34cda9bd0d22f73e807ffc6ce8cdbdb816b02206a8d583de810651fa66924356525342ebd4970e8f75eb26ec695730a7a076bf0014c6952210215c6c20a3672e42aa9f5863fabc1ad52a92539da8407b8b80c6444c7ac423a1a2102f56163f3e3d5226c9aa151127f6043be87fb048ba1c01aba3483a12d8096ffb421039cf6653c3cae1385e2795f1e6db6a63938a4f43c6875d9ee59c20f4f6ba313e153aeffffffff3dcd29c434adcd8f9a30c036fda6039488cf3a57976f99d8a11ab30be3afe80401000000fdfe0000483045022100b16c626b9d9cb9c74ba2cca3d9b8a5a5a7dbdd3a4194a877b67057a3ce8c793c0220395c03b0b219cbc49e04ecdbb3c6c0057457f761140e5682c9a44d99cdbb119d01483045022100ff029ad59288c72c3d2e533edcb419d6fee0b829ed59758342fc7a658b82233b02206fa8533b0d6dfd050b49df6b1f3e15b9a9d0ec86190a9a2b47d85c02f4891c34014c6952210215c6c20a3672e42aa9f5863fabc1ad52a92539da8407b8b80c6444c7ac423a1a2102f56163f3e3d5226c9aa151127f6043be87fb048ba1c01aba3483a12d8096ffb421039cf6653c3cae1385e2795f1e6db6a63938a4f43c6875d9ee59c20f4f6ba313e153aeffffffff02840300000000000017a914f11b0b4fcc78791611f6e81a062826f2c7fddb9a8700162600000000001976a914bf819a7d1fc87cbef6dd6340c43f801e2e2299d488ac00000000", sign)
}
